package robotMotorSensorControl;

import java.io.IOException;
import java.util.ArrayList;
import robotSideCommsUnit.RobotCommunication;
import lejos.nxt.Battery;
import lejos.nxt.LCD;
import lejos.nxt.Motor;
import lejos.nxt.SensorPort;
import lejos.nxt.UltrasonicSensor;
import lejos.robotics.localization.OdometryPoseProvider;
import lejos.robotics.navigation.DifferentialPilot;
import lejos.robotics.navigation.Pose;
import lejos.robotics.subsumption.Behavior;
import lejos.util.Delay;

/**
 * the class contains the methods to control the robot to do 
 * some certain tasks according to the commands received.
 * @fileName RobotBehaviorControl
 * @author Yu Hong
 *
 */

public class RobotBehaviourControl {
	private RobotCommunication robotComms;
	private DifferentialPilot pilot;
	private int command;
	private SensorInfo sensor;
	private UltrasonicSensor range;
	private int lightValue;
	private int distance;
	private int tachoA;
	private int tachoB;
	private int speed;
	private int travelAngle;
	private int totalDistance;
	private int incrementDistance;
	
	//line follower data
	private int blackVal = 40; // light sensor black value
	private int whiteVal = 50; // light sensor white value
	private int midVal = 45; // light sensor mid value
	private int error = 0; // difference between current sensor value and midVal
	private double turnRate; // rate of turning
	private int lightSensorRange = 0; //range of values light sensor can take
	private final int steeringCoefficient = 2; //the coefficient that determines
												 //how fast the robot turns relative to the error
	private double normalisedError = 0.0; // error as a percentage of the lightSensorRange
	private int [] scan = new int[200]; // line-scanner data-structure
	private int index;
	private int width = 0;
	private boolean reachedVertex = false;
	private int distanceToTravel;
	
	OdometryPoseProvider odoPose;
	Pose pose;
	/**
	 * the constructor of the class
	 */
	public RobotBehaviourControl(){
		speed = 5;
		pilot = new DifferentialPilot(5.6f, 13.5, Motor.A, Motor.B, false);  // parameters in cm
		pilot.setTravelSpeed(speed);
		pilot.setRotateSpeed(60);
		sensor = new SensorInfo();
		robotComms = new RobotCommunication();
		range = new UltrasonicSensor(SensorPort.S4);
		incrementDistance = 0;
		totalDistance = 0;
		odoPose = new OdometryPoseProvider(pilot);
		pose = odoPose.getPose();
		pose.setLocation(0, 0);
	}
	
	/**
	 * to set the current command and store it to the arraylist
	 * @param c the concrete command represented as integer
	 * @return the result value
	 * @throws IOException
	 */
	public int setCommand(int c) throws IOException{
		command = c;
		return this.doCommand();
	}
	
	/**
	 * to get the current speed
	 * @return speed
	 */
	public int getSpeed(){
		return speed;
	}
	
	/**
	 * the method would control the robot to perform certain tasks
	 * according to the command received.
	 * @return the result value
	 * @throws IOException
	 */
	public int doCommand() throws IOException{
		if (command == -1){
			robotComms.disconnection();
		}
		if (command == 0){
			incrementDistance = 0;
			totalDistance = 0;
			pilot.stop();
		}
		if (command == 1){
			incrementDistance = 0;
			totalDistance = 0;
			pilot.forward();
		}
		if (command == 2){
			incrementDistance = 0;
			totalDistance = 0;
			pilot.backward();
		}
		if (command == 3){
			incrementDistance = 0;
			totalDistance = 0;
			pilot.rotate(90);
		}
		if (command == 4){
			incrementDistance = 0;
			totalDistance = 0;
			pilot.rotate(-90);
		}
		
		if (command == 11){
			double batteryVoltage =Battery.getVoltageMilliVolt();
			double batteryLevel = (batteryVoltage - 7000)/1400.0;
			batteryLevel = batteryLevel*100;
			int battery = (int)batteryLevel + 200;
			return battery;
		}
		if (command == 12){
			lightValue = sensor.getLightValue()+100;
			return lightValue;
			}
		if (command == 13){
			tachoA = Motor.A.getTachoCount();
	//		Motor.A.resetTachoCount();
			LCD.drawInt(tachoA,2,4);
			if (tachoA >= 0){
				tachoA = tachoA+1000;
				return tachoA;
			}
			if (tachoA < 0){
				tachoA = tachoA-1000;
				return tachoA;
			}
		}
//		if (command == 14){
//			tachoB = Motor.B.getTachoCount();
//			Motor.A.resetTachoCount();
//			LCD.drawInt(tachoB,2,6);
//			tachoB = tachoB+1000;
//			if (tachoB >= 0){
//				tachoB = tachoB+1000;
//				return tachoB;
//			}
//			if (tachoB < 0){
//				tachoB = tachoB-1000;
//				return tachoB;
//			}
//		}
		
		if (command == 15){
			distance = range.getDistance();
			distance = distance + 300;
			return distance;
		}
		if (command == 17){
			incrementDistance = totalDistance;
			totalDistance = (int) pilot.getMovement().getDistanceTraveled();
			incrementDistance = totalDistance- incrementDistance;
			if (incrementDistance>speed+1)
				incrementDistance = 0;
			return incrementDistance + 20000;
		}
		
//		if (command == 17){
//	//		OdometryPoseProvider odoPose = new OdometryPoseProvider(pilot);
//	//		Pose pose = odoPose.getPose();
//			int x = (int)pose.getX();
//			int y = (int)pose.getY();
//			LCD.drawInt(x, 6, 1);
//			
//			return y+20000;
//		}
		
		if (command == 20){
			pilot.rotate(180);
	        pilot.travel(5);
	        Delay.msDelay(100);
	        Motor.C.setSpeed(30);
	        Motor.C.rotate(-35);
	        pilot.rotate(5);
	        pilot.rotate(-10);
	        pilot.rotate(5);
	        Motor.C.rotate(35);
	        pilot.travel(-5);
	        pilot.rotate(-180);
			incrementDistance = 0;
			totalDistance = 0;
		}
		
		if (command >=150 && command <=165){
			speed = command - 150;
			pilot.setTravelSpeed(speed);
		}
		
		if(command >= 21 && command <= 149){
			//follow line to the next vertex
			
			//initialise scan data-structure
			for(int i = 0; i < scan.length; i++){
				scan[i] = 0;
			}
			
			//set distance to be travelled
			distanceToTravel = command - 21;
			reachedVertex = distanceToTravel == 0;

			while(!reachedVertex){
				pilot.forward(); //go forward
				error = midVal - sensor.getLightValue();
				normalisedError = (Integer.valueOf(error).doubleValue()/(lightSensorRange/2))*100;
				turnRate = normalisedError * steeringCoefficient;
				pilot.steer(turnRate); //steer proportionately to the error
				
				if((sensor.getLightValue() < blackVal) || (sensor.getLightValue() == whiteVal)){
					//scan line to test if it is an intersection
					pilot.rotate(20);
					pilot.setRotateSpeed(20); // rotate speed = 20deg/sec = 20deg/1000ms, so ...
					pilot.rotate(-40, true);
					index = 0;
					while(pilot.isMoving()){
						if(index < scan.length){
							scan[index] = sensor.getLightValue();
							LCD.drawInt(scan[index], 0, 0);
							index++;
							Delay.msDelay(50); //... read one value every 50ms (20/1000=50)
						}
						else
							break;
					}
					pilot.rotate(20);
					//width will determine: line or intersection?
					width = 0;
					for(int i = 0; i < scan.length; i++){
						if(scan[i] < midVal){
							width++;
						}
					}
					LCD.clear();
					LCD.drawInt(width, 0, 0);
					Delay.msDelay(1000);
					
					//reset scan
					for(int i = 0; i < scan.length; i++){
						scan[i] = 0;
					}
					
					if(width >= 170){
						//then it is an intersection, so stop
						reachedVertex = true;
					}
				}
			}
		}
		
		return 0;
	}
}
