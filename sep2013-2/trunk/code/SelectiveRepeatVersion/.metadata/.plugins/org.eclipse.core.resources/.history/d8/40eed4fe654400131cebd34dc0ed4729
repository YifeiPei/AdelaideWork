package robotMotorSensorControl;

import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import robotSideCommsUnit.RobotCommunication;
import lejos.nxt.Battery;
import lejos.nxt.Button;
import lejos.nxt.LCD;
import lejos.nxt.Motor;
import lejos.nxt.SensorPort;
import lejos.nxt.UltrasonicSensor;
import lejos.robotics.localization.OdometryPoseProvider;
import lejos.robotics.navigation.DifferentialPilot;
import lejos.robotics.navigation.Pose;
import lejos.robotics.subsumption.Behavior;
import lejos.util.Delay;
import lejos.util.Timer;
import lejos.util.TimerListener;
import lejos.nxt.comm.RConsole;

/**
 * the class contains the methods to control the robot to do 
 * some certain tasks according to the commands received.
 * @fileName RobotBehaviorControl
 * @author Yu Hong & Matthew Nestor
 *
 */

public class RobotBehaviourControl{
	/*+++++++++++ OP-CODES +++++++++++*/
	private static final byte DISCONNECT = 0x00;
	private static final byte STOP = 0x01;
	private static final byte FORWARD = 0x02;
	private static final byte BACKWARD = 0x03;
	private static final byte TURNLEFT = 0x04;
	private static final byte TURNRIGHT = 0x05;
	private static final byte ALIGNTOROAD = 0x06;
	private static final byte GETBATTERYDATA = 0x07;
	private static final byte GETROBOTLOCATION = 0x08;
	private static final byte SETROBOTLOCATION = 0x09;
	private static final byte SETROBOTORIENTATION = 0x0a;
	private static final byte SETTRAVELSPEED = 0x0b;
	private static final byte MARKROAD = 0x0c;
	private static final byte FOLLOWLINE = 0x0d;
	
	private RobotCommunication robotComms;
	private DifferentialPilot pilot;
	private LineFollower lineFollower;
	private RobotStatusMonitor statusMonitor;
	private volatile int command;
	private SensorInfo sensor;
	private UltrasonicSensor range;
	private int lightValue;
	private int distance;
	private int tachoA;
	private int tachoB;
	private int speed;
	private int travelAngle;
	private OdometryPoseProvider odoPose;
	private Pose pose;
	private static final int FOUNDVERTEX = 1;

	/**
	 * the constructor of the class
	 */
	public RobotBehaviourControl(RobotCommunication rb){
		speed = 3;
		pilot = new DifferentialPilot(5.6, 13.4, Motor.A, Motor.B);  // parameters in cm
		pilot.setTravelSpeed(speed);
		pilot.setRotateSpeed(30);
		sensor = new SensorInfo();
		robotComms = rb;
		range = new UltrasonicSensor(SensorPort.S4);
		odoPose = new OdometryPoseProvider(pilot);
		statusMonitor = new RobotStatusMonitor(pilot);
		pose = new Pose();
	}

	public void executeCommand(byte [] packet) throws IOException{
		if(getOpCode(packet[0]) == DISCONNECT){
			LCD.clear();
			LCD.drawString("Disconnecting...", 0, 0);
			robotComms.disconnection();
		}else if(getOpCode(packet[0]) == STOP){
			LCD.clear();
			LCD.drawString("Stop", 0, 0);
			pilot.stop();
			if(lineFollower != null){
				if(lineFollower.isAlive()){
					lineFollower.terminate();
					try {
						lineFollower.join();
					} catch (InterruptedException e) {
						//e.printStackTrace();
						LCD.clear();
						LCD.drawString("Exception: 91\n"+e.getMessage(), 0, 0);
						Button.waitForAnyPress();
					}
				}
			}
			pilot.stop();
		}else if(getOpCode(packet[0]) == FORWARD){
			LCD.clear();
			LCD.drawString("Forward", 0, 0);
			pilot.forward();
		}else if(getOpCode(packet[0]) == BACKWARD){
			LCD.clear();
			LCD.drawString("Backward", 0, 0);
			pilot.backward();
		}else if(getOpCode(packet[0]) == TURNLEFT){
			LCD.clear();
			LCD.drawString("Turn Left", 0, 0);
			pilot.rotate(90);
		}else if(getOpCode(packet[0]) == TURNRIGHT){
			LCD.clear();
			LCD.drawString("Turn right", 0, 0);
			pilot.rotate(-90);
		}else if(getOpCode(packet[0]) == ALIGNTOROAD){
			LCD.clear();
			LCD.drawString("Aligning", 0, 0);
			pilot.rotate(5);
			pilot.travel(20);
		}else if(getOpCode(packet[0]) == SETROBOTLOCATION){
			LCD.clear();
			LCD.drawString("SetRoboLoc", 0, 0);
			LCD.drawString("x = "+String.valueOf(this.byteToInt(packet[1])), 0, 1);
			LCD.drawString("y = "+String.valueOf(this.byteToInt(packet[2])), 0, 2);
			pose.setLocation(this.byteToInt(packet[1]), this.byteToInt(packet[2]));
			odoPose.setPose(pose);
		}else if(getOpCode(packet[0]) == SETROBOTORIENTATION){
			LCD.clear();
			LCD.drawString("SetRoboOr", 0, 0);
			LCD.drawString("Angle = "+String.valueOf(this.byteToInt(packet[2])), 0, 1);
			pose.setHeading(this.byteToInt(packet[2]));
			odoPose.setPose(pose);
		}else if(getOpCode(packet[0]) == SETTRAVELSPEED){
			LCD.clear();
			LCD.drawString("TravSpeed", 0, 0);
			LCD.drawString("Speed = "+String.valueOf(this.byteToInt(packet[2])), 0, 1);
			pilot.setTravelSpeed(this.byteToInt(packet[2]));
		}else if(getOpCode(packet[0]) == MARKROAD){
			LCD.clear();
			LCD.drawString("Mark", 0, 0);
			pilot.stop();
			pilot.rotate(180);
			pilot.travel(5);
			Delay.msDelay(100);
			Motor.C.setSpeed(30);
			Motor.C.rotate(-35);
			pilot.rotate(5);
			pilot.rotate(-10);
			pilot.rotate(5);
			Motor.C.rotate(35);
			pilot.travel(-5);
			pilot.rotate(-180);
		}else if(getOpCode(packet[0]) == FOLLOWLINE){
			LCD.clear();
			LCD.drawString("Follow", 0, 0);
			lineFollower = new LineFollower(pilot, statusMonitor, robotComms);
			lineFollower.setDistance(this.byteToInt(packet[2]));
			lineFollower.start();
		}
	}
	
	public byte [] getData(byte [] packet){
		if(getOpCode(packet[0]) == GETBATTERYDATA){
			LCD.clear();
			LCD.drawString("Battery", 0, 0);
			packet[2] = this.intToByte(80);
		}else if(getOpCode(packet[0]) == GETROBOTLOCATION){
			LCD.clear();
			LCD.drawString("GetRoboLoc", 0, 0);
			packet[1] = 5;
			packet[2] = 10;
		}
		return packet;
	}
	
	private byte getOpCode(byte b){
		return (byte)(b & 0x0f);
	}
	
	private int byteToInt(byte b){
		return (int)(b & 0xff);
	}
	
	private byte intToByte(int i){
		return (byte)i;
	}
}
