/**
 * SELECTIVE REPEAT COMMUNICATION FOR leJOS NXT
 * by Matthew Nestor
 *
 * PACKET STRUCTURE INFORMATION
 *
 * { 0 0 0 0 _ 0 0 0 0 } { 0 0 0 0 _ 0 0 0 0 } { 0 0 0 0 _ 0 0 0 0 } { 0 0 0 0 _ 0 0 0 0 }
 * {	   header	   } {				   payload				   } {		checksum	 }
 * {{seq no.} {op-code}}
 *
 * - The packets are big-endian.
 * - ACKS are performed by returning a packet with the sequence number of the packet to the acknowledged. There are no NACKS.
 *   This is possible because each side can distinguish between ACKs and commands, because certain commands are only sent from one side
 * - The 1st, 2nd, 3rd, and 4th bits represent the sequence number. Hence there is a maximum of 16 sequence numbers.
 * - The 5th-to-8th bits represent the op-code. Hence there is a maximum of 16 op-codes.
 */

package robotSideCommsUnit;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import robotMotorSensorControl.RobotBehaviourControl;
import lejos.nxt.Button;
import lejos.nxt.LCD;
import lejos.nxt.comm.Bluetooth;
import lejos.nxt.comm.NXTConnection;

import java.util.Timer;
import java.util.TimerTask;

/**
 * @author Matthew Nestor
 * @filename RobotCommunication.java
 * @package robotSideCommunication
 * @project RobotSide
 * @date 01/11/2013
 */

public class RobotCommunication extends Thread{


	/*+++++++++++ OP-CODES +++++++++++*/
	private static final byte DISCONNECT = 0x00;
	private static final byte STOP = 0x01;
	private static final byte FORWARD = 0x02;
	private static final byte BACKWARD = 0x03;
	private static final byte TURNLEFT = 0x04;
	private static final byte TURNRIGHT = 0x05;
	private static final byte ALIGNTOROAD = 0x06;
	private static final byte GETBATTERYDATA = 0x07;
	private static final byte GETROBOTLOCATION = 0x08;
	private static final byte SETROBOTLOCATION = 0x09;
	private static final byte SETROBOTORIENTATION = 0x0a;
	private static final byte SETTRAVELSPEED = 0x0b;
	private static final byte MARKROAD = 0x0c;
	private static final byte FOLLOWLINE = 0x0d;
	private static final byte TOUCHSENSORPRESSED = 0x0e;
	private static final byte REACHEDVERTEX = 0x0f;

	/*+++++++++++ SEQ-NUMS +++++++++++*/
	private static final byte SE0 = 0x00;
	private static final byte SE1 = 0x10;
	private static final byte SE2 = 0x20;
	private static final byte SE3 = 0x30;
	private static final byte SE4 = 0x40;
	private static final byte SE5 = 0x50;
	private static final byte SE6 = 0x60;
	private static final byte SE7 = 0x70;
	private static final byte SE8 = (byte)0x80;
	private static final byte SE9 = (byte)0x90;
	private static final byte SE10 = (byte)0xa0;
	private static final byte SE11 = (byte)0xb0;
	private static final byte SE12 = (byte)0xc0;
	private static final byte SE13 = (byte)0xd0;
	private static final byte SE14 = (byte)0xe0;
	private static final byte SE15 = (byte)0xf0;

	/*+++++++++++ WINDOW FIELDS +++++++++++*/
	private static final int WINDOWSIZE = 8;
	private static final int SEQSPACE = 16;
	private WindowElementOUT [] outBuffer;
	private WindowElementIN [] inBuffer;
	private int winFirstOUT, winLastOUT, winCountOUT, nextSeqNumOUT; 
	private int winFirstIN, winCountIN, expectedSeqNum;

	/*+++++++++++ STREAM FIELDS +++++++++++*/
	private NXTConnection connection;
	private DataInputStream dis;
	private DataOutputStream dos;
	private volatile boolean finished;

	/*+++++++++++ MISC FIELDS +++++++++++*/
	private static final byte EMPTY = 0x00;
	private static final long RTT = 500;
	private Timer roundTripTimer;
	private String connected = "Connected";
	private String waiting = "Waiting...";
	private String closing = "Closing...";
	private RobotBehaviourControl robotBehave;

	public RobotCommunication(){
		robotBehave = new RobotBehaviourControl(this);
		outBuffer = new WindowElementOUT[WINDOWSIZE];
		inBuffer = new WindowElementIN[WINDOWSIZE];
		nextSeqNumOUT = 0;
		winFirstOUT = 0;
		winLastOUT = -1;
		winCountOUT = 0;
		expectedSeqNum = 0;
		winFirstIN = 0;
		winCountIN = 0;
		for(int i = 0; i < WINDOWSIZE; i++){
			outBuffer[i] = new WindowElementOUT();
			outBuffer[i].setACKED(false);
			outBuffer[i].setEMPTY(true);
		}
		for(int i = 0; i < WINDOWSIZE; i++){
			inBuffer[i] = new WindowElementIN();
			inBuffer[i].setRECEIVED(false);
		}
	}

	public void touchSensorPressed() throws Exception{
		byte [] packet = new byte[4];
		packet[0] = TOUCHSENSORPRESSED;
		packet[1] = EMPTY;
		packet[2] = EMPTY;
		this.sendCommand(packet);
	}

	public void reachedVertex() throws Exception{
		byte [] packet = new byte[4];
		packet[0] = REACHEDVERTEX;
		packet[1] = EMPTY;
		packet[2] = EMPTY;
		this.sendCommand(packet);
	}

	/**
	 * start the connection from the robot side when a connection 
	 * request from the PC side arrives.
	 */
	public void waitingForConnection(){
		LCD.drawString(waiting,0,0);
		connection = Bluetooth.waitForConnection();
		LCD.clear();
		LCD.drawString(connected,0,0);
		this.createStream();
	}

	/**
	 * create the input and output stream for communication.
	 */
	public void createStream(){
		dis = connection.openDataInputStream();
		dos = connection.openDataOutputStream();
	}

	/**
	 * receive the concrete commands which are represented as integers,
	 *  and pass the commands to the RobotBehaviorControl class.
	 */
	public void startCommunication(){
		finished = false;
		while (!finished){
			try {
				messageHandler(dis.readInt());
			} catch (EOFException e) {
				break; //exit normally
			} catch (IOException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void messageHandler(int m) throws Exception{
		byte [] packet = intToByteArray(m);
		byte opcode = this.getOpCode(packet[0]);
		if(opcode == TOUCHSENSORPRESSED || opcode == REACHEDVERTEX){
			this.ackHandler(packet);
		}else{
			this.commandHandler(packet);
		}
	}

	private void commandHandler(byte [] packet) throws Exception{
		int acceptableRange = (expectedSeqNum + WINDOWSIZE - 1) % SEQSPACE;
		int seqNum = this.getSeqNum(packet[0]);

		if( (!packetIsCorrupt(packet)) && (seqNum >= expectedSeqNum || seqNum <  acceptableRange) ){
			//packet is not corrupted and in order
			
			if(getOpCode(packet[0]) == GETBATTERYDATA || getOpCode(packet[0]) == GETROBOTLOCATION){
				//packet is a data request. Update packet, re-do checksum, send back data
				packet = this.getData(packet);
				packet[3] = this.computeChecksum(packet);
			}
			inBuffer[(((seqNum - expectedSeqNum) % SEQSPACE) + winFirstIN) % WINDOWSIZE].setPacket(packet);
			inBuffer[(((seqNum - expectedSeqNum) % SEQSPACE) + winFirstIN) % WINDOWSIZE].setRECEIVED(true);
			winCountIN = (winCountIN + 1) % WINDOWSIZE;

			while(inBuffer[winFirstIN].isRECEIVED()){
				inBuffer[winFirstIN].setRECEIVED(false);
				this.executeCommand(inBuffer[winFirstIN].getPacket()); //move to RobotBehaviourControl
				winFirstIN = (winFirstIN + 1) % WINDOWSIZE;
				expectedSeqNum = (expectedSeqNum + 1) % SEQSPACE;    
			}

		}else if(!packetIsCorrupt(packet)){
			//packet is not corrupted but already received; previous ACK has been lost; send duplicate ACK
		}else{
			//packet is corrupt; do nothing; wait for timeout to resend
			return;
		}

		this.sendACK(packet);
	}
	
	private byte [] getData(byte [] packet){
		if(getOpCode(packet[0]) == GETBATTERYDATA){
			LCD.clear();
			LCD.drawString("Battery", 0, 0);
			packet[2] = this.intToByte(80);
		}else if(getOpCode(packet[0]) == GETROBOTLOCATION){
			LCD.clear();
			LCD.drawString("GetRoboLoc", 0, 0);
			packet[1] = 5;
			packet[2] = 10;
		}
		return packet;
	}

	//to be moved to RobotBehaviourControl
	private void executeCommand(byte [] packet) throws IOException{
		if(getOpCode(packet[0]) == DISCONNECT){
			LCD.clear();
			LCD.drawString("Disconnecting...", 0, 0);
			this.disconnection();
		}else if(getOpCode(packet[0]) == STOP){
			LCD.clear();
			LCD.drawString("Stop", 0, 0);
			//Button.waitForAnyPress();
		}else if(getOpCode(packet[0]) == FORWARD){
			LCD.clear();
			LCD.drawString("Forward", 0, 0);
		}else if(getOpCode(packet[0]) == BACKWARD){
			LCD.clear();
			LCD.drawString("Backward", 0, 0);
		}else if(getOpCode(packet[0]) == TURNLEFT){
			LCD.clear();
			LCD.drawString("Turn Left", 0, 0);
		}else if(getOpCode(packet[0]) == TURNRIGHT){
			LCD.clear();
			LCD.drawString("Turn right", 0, 0);
		}else if(getOpCode(packet[0]) == ALIGNTOROAD){
			LCD.clear();
			LCD.drawString("Aligning", 0, 0);
		}else if(getOpCode(packet[0]) == SETROBOTLOCATION){
			LCD.clear();
			LCD.drawString("SetRoboLoc", 0, 0);
			LCD.drawString("x = "+String.valueOf(this.byteToInt(packet[1])), 0, 1);
			LCD.drawString("y = "+String.valueOf(this.byteToInt(packet[2])), 0, 2);
		}else if(getOpCode(packet[0]) == SETROBOTORIENTATION){
			LCD.clear();
			LCD.drawString("SetRoboOr", 0, 0);
			LCD.drawString("Angle = "+String.valueOf(this.byteToInt(packet[2])), 0, 1);
		}else if(getOpCode(packet[0]) == SETTRAVELSPEED){
			LCD.clear();
			LCD.drawString("TravSpeed", 0, 0);
			LCD.drawString("Speed = "+String.valueOf(this.byteToInt(packet[2])), 0, 1);
		}else if(getOpCode(packet[0]) == MARKROAD){
			LCD.clear();
			LCD.drawString("Mark", 0, 0);
		}else if(getOpCode(packet[0]) == FOLLOWLINE){
			LCD.clear();
			LCD.drawString("Follow", 0, 0);
		}
	}

	private void ackHandler(byte [] packet) throws Exception{
		boolean theWindowSlid = false;
		int ackNum = getSeqNum(packet[0]);

		if(!packetIsCorrupt(packet)){
			//packet is intact
			if(winCountOUT != 0){
				//we are expecting an ACK
				int seqFirst = outBuffer[winFirstOUT].getSeqNum();
				int seqLast = outBuffer[winLastOUT].getSeqNum();
				if(	((seqFirst <= seqLast) && (ackNum >= seqFirst && ackNum <= seqLast)) ||
						((seqFirst > seqLast) && (ackNum >= seqFirst || ackNum <= seqLast))){
					//it's a new ACK

					//register ACK
					for(int i = 0; i < WINDOWSIZE; i++){
						if(outBuffer[i].getSeqNum() == ackNum){
							outBuffer[i].setACKED(true);
							break;
						}
					}

					//if the ACK is in the lowest part of the window, stop the timer
					if(outBuffer[winFirstOUT].isACKED()){
						roundTripTimer.cancel();
						roundTripTimer.purge();
					}

					//slide the window up
					while(outBuffer[winFirstOUT].isACKED()){
						theWindowSlid = true;
						outBuffer[winFirstOUT].setACKED(false);
						outBuffer[winFirstOUT].setEMPTY(true);
						winFirstOUT = (winFirstOUT + 1) % WINDOWSIZE;
						winCountOUT--; //decrement the number of packets in the window
					}

					//if the window slid, restart the timer
					if(theWindowSlid && winCountOUT > 0){
						roundTripTimer = new Timer("RTTTimer");
						roundTripTimer.schedule(new RTTTask(), RTT);
					}	
				}else{
					//System.out.println("Received duplicate ACK!");
				}
			}
		}else{
			//System.out.println("Received corrupted packet!");
		}
	}

	public void sendACK(byte [] packet) throws IOException{
		int ack = this.byteArrayToInt(packet);
		dos.writeInt(ack);
		dos.flush();
		LCD.drawString("ACK sent...", 0, 1);
		//Button.waitForAnyPress();
	}

	public boolean sendCommand(byte [] packet) throws Exception{
		if(winCountOUT < WINDOWSIZE){
			//make packet
			int command = this.makePacket(nextSeqNumOUT, packet);

			//add packet to window
			winLastOUT = (winLastOUT + 1) % WINDOWSIZE;
			outBuffer[winLastOUT].setPacket(command);
			outBuffer[winLastOUT].setSeqNum(nextSeqNumOUT);
			outBuffer[winLastOUT].setEMPTY(false);
			outBuffer[winLastOUT].setACKED(false);

			//increment values
			winCountOUT++;
			nextSeqNumOUT = (nextSeqNumOUT + 1) % SEQSPACE;

			//send message!
			dos.writeInt(command);
			dos.flush();

			//set timer if first item in window
			if(winCountOUT == 1){
				roundTripTimer = new Timer("RTTimer");
				roundTripTimer.schedule(new RTTTask(), RTT);
			}
			return true;
		}else{
			return false;
		}
	}

	private byte computeChecksum(byte [] byteArray){
		int checksum = 0;
		for(int i = 0; i < byteArray.length - 1; i++){
			byte value = byteArray[i];
			for(int j = 0; j < 8; j++){
				checksum = checksum + (value & 0x01);
				value = (byte)(value >> 1);
			}
		}
		return this.intToByte(checksum);
	}

	private boolean packetIsCorrupt(byte [] packet){
		byte checksum = computeChecksum(packet);
		return (checksum != packet[3]);
	}

	private int makePacket(int seqNum, byte [] packet) throws Exception{
		packet[0] = (byte)(this.transformSeqNum(seqNum) | packet[0]);
		byte checksum = computeChecksum(packet);
		packet[3] = checksum;
		return byteArrayToInt(packet);
	}

	private int byteArrayToInt(byte[] b) 
	{
		return (int)((b[0] & 0xFF) << 24 |
				(b[1] & 0xFF) << 16 |
				(b[2] & 0xFF) << 8  |
				(b[3] & 0xFF));
	}

	private byte[] intToByteArray(int array)
	{
		return new byte[] {
				(byte) ((array >> 24) & 0xFF),
				(byte) ((array >> 16) & 0xFF),   
				(byte) ((array >> 8) & 0xFF),   
				(byte) (array & 0xFF)
		};
	}

	private int byteToInt(byte b){
		return (int)(b & 0xff);
	}

	private byte intToByte(int i){
		return (byte)i;
	}

	private byte transformSeqNum(int sequenceNumber) throws Exception{
		switch(sequenceNumber){
		case 0:
			return SE0;
		case 1:
			return SE1;
		case 2:
			return SE2;
		case 3:
			return SE3;
		case 4:
			return SE4;
		case 5:
			return SE5;
		case 6:
			return SE6;
		case 7:
			return SE7;
		case 8:
			return SE8;
		case 9:
			return SE9;
		case 10:
			return SE10;
		case 11:
			return SE11;
		case 12:
			return SE12;
		case 13:
			return SE13;
		case 14:
			return SE14;
		case 15:
			return SE15;
		}

		throw new Exception("Invalid sequence number");
	}

	private int getSeqNum(byte sequenceNumber) throws Exception{
		if((sequenceNumber & 0xf0) == SE0)
			return 0;
		else if((sequenceNumber & 0xf0) == SE1)
			return 1;
		else if((sequenceNumber & 0xf0) == SE2)
			return 2;
		else if((sequenceNumber & 0xf0) == SE3)
			return 3;
		else if((sequenceNumber & 0xf0) == SE4)
			return 4;
		else if((sequenceNumber & 0xf0) == SE5)
			return 5;
		else if((sequenceNumber & 0xf0) == SE6)
			return 6;
		else if((sequenceNumber & 0xf0) == SE7)
			return 7;
		else if((byte)(sequenceNumber & 0xf0) == SE8)
			return 8;
		else if((byte)(sequenceNumber & 0xf0) == SE9)
			return 9;
		else if((byte)(sequenceNumber & 0xf0) == SE10)
			return 10;
		else if((byte)(sequenceNumber & 0xf0) == SE11)
			return 11;
		else if((byte)(sequenceNumber & 0xf0) == SE12)
			return 12;
		else if((byte)(sequenceNumber & 0xf0) == SE13)
			return 13;
		else if((byte)(sequenceNumber & 0xf0) == SE14)
			return 14;
		else if((byte)(sequenceNumber & 0xf0) == SE15)
			return 15;

		LCD.clear();
		LCD.drawString("SeqNum: "+this.byteToInt((byte)(sequenceNumber & 0xf0)), 0, 0);
		Button.waitForAnyPress();
		throw new Exception("Invalid sequence number");
	}

	private byte getOpCode(byte b){
		return (byte)(b & 0x0f);
	}

	private class RTTTask extends TimerTask{
		public void run(){
			System.out.println("RTT Timer expired");
			//send message!
			try {
				dos.writeInt(outBuffer[winFirstOUT].getPacket());
				dos.flush();
				System.out.println("Resending first packet");
			} catch (IOException e) {
				e.printStackTrace();
			}
			roundTripTimer = new Timer("RTTTimer");
			roundTripTimer.schedule(new RTTTask(), RTT);
			System.out.println("Reset RTT Timer");
		}
	}

	public void run(){
		while(true){
			waitingForConnection();
			startCommunication();
		}
	}

	/**
	 * the method used to cancel the connection
	 * @throws IOException
	 */
	public void disconnection() throws IOException{
		finished = true;
		dis.close();
		dos.close();
		LCD.clear();
		LCD.drawString(closing,0,0);
		connection.close();
		/*
		while(!Button.ENTER.isDown()){

		}
		 */
		LCD.clear();
	}

	private class WindowElementOUT{
		int packet;
		int seqNum;
		boolean isACKED;
		boolean isEMPTY;

		public void setSeqNum(int i){
			seqNum = i;
		}

		public int getSeqNum(){
			return seqNum;
		}

		public void setPacket(int i){
			packet = i;
		}

		public int getPacket(){
			return packet;
		}

		public void setACKED(boolean b){
			isACKED = b;
		}

		public boolean isACKED(){
			return isACKED;
		}

		public void setEMPTY(boolean b){
			isEMPTY = b;
		}

		public boolean isEMPTY(){
			return isEMPTY;
		}
	}

	private class WindowElementIN{
		byte [] packet;
		boolean isRECEIVED;

		public void setPacket(byte [] p){
			packet = p;
		}

		public byte [] getPacket(){
			return packet;
		}

		public void setRECEIVED(boolean b){
			isRECEIVED = b;
		}

		public boolean isRECEIVED(){
			return isRECEIVED;
		}
	}

}
