;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                             ;
;       newNode Dynamic storage manager to allocate new nodes                 ;
;                                                                             ;
;       Written D Knight 16jul11                                              ;
;                                                                             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	.export	bstValue
	.export	bstLeft
	.export	bstRight

;	Offsets to fields of the node
bstValue .equ	0		;Node value
bstLeft	 .equ	4		;->leftChild
bstRight .equ	8		;->rightChild
bstSize	.equ	12

	.seg	Heap
	.align	2
hpFree	.word	hp		;Pointer to start of free space
hp	.space 1020		;the Heap
hpEnd	.equ   $-bstSize


	.seg   Constant
heapF	.word	hpFree		; address of var fptr
heapE	.word	hpEnd		; address of end of free space



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                             ;
;       newNode Create a new binary search tree node                          ;
;                                                                             ;
;               Initialises the node with the given the new node, and sets    ;
;               pointers to subtrees to NULL                                  ;
;               children pointers to empry sub-trees.                         ;
;                                                                             ;
;               Halts the program if there is no space in the heap            ;
;                                                                             ;
;       Entry   r1= Number                                                    ;
;               jal newNode                                                   ;
;                                                                             ;
;       Result  r1= ->newNode                                                 ;
;                                                                             ;
;       Uses    r1                                                            ;
;                                                                             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

N	.equ	0
saveR2	.equ	-8
saveR3	.equ	-12
saveR4	.equ	-16
framSiz	.equ	16

	.seg	Code
	.export	newNode
	.import	strPut
					
newNode	sw	-4(r14),r30	        ;Create stacjk frame
	mov	r30,r14
	subi	r14,r14,framSiz

	sw	saveR2(r30),r2		;Save registers
	sw	saveR3(r30),r3
	sw	saveR4(r30),r4

;	Allocate space in the heap

	lw	r2,heapF		;r2= ->->free space
	lw	r3,(r2);		;r3= ->newNode
	lw	r4,heapE		;r2= ->heapEnd
	sgtu	r4,r3,r4		;->newNode outside heap?
	bf	r4,newNode1

	addui	r1,r0,fullMsg		;Complain...
	jal	strPut
	halt				;...and DIE

;	initialise the node

newNode1
	sw	bstValue(r3),r1		;newNode,value= number
	sw	bstLeft(r3),r0		;newNode.left= NULL
	sw	bstRight(r3),r0		;newNode.right= NULL
	mov	r1,r3			;r1= ->NewNode

;	Update heap pointer

	addui	r3,r3,bstSize		;Update free pointer
	sw	(r2),r3				 

	lw	r2,saveR2(r30)		;Restore registers
	lw	r3,saveR3(r30)
	lw	r4,saveR4(r30)
	mov	r14,r30			;Destroy stack frame
	lw	r30,-4(r14)
	jr	r31

	.seg	Constant
fullMsg	.ascii	"Heap full\r\n\0"
